/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.29).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package it.its.nttdata.demo.api;

import it.its.nttdata.demo.model.KnifeResponse;
import it.its.nttdata.demo.model.ModelApiResponse;
import org.springframework.core.io.Resource;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2023-02-02T09:30:50.975Z")

@Validated
@Api(value = "knife", description = "the knife API")
@RequestMapping(value = "/v2")
public interface KnifeApi {

    @ApiOperation(value = "Add a new Knife to the store", nickname = "addKnife", notes = "", tags={ "knives", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/knife/addKnife",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<KnifeResponse> addKnife(@ApiParam(value = "Knife object that needs to be added to the store" ,required=true )  @Valid @RequestBody KnifeResponse body);


    @ApiOperation(value = "Deletes a knife", nickname = "deleteKnife", notes = "", tags={ "knives", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Knife not found") })
    @RequestMapping(value = "/knife/deleteKnife",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<KnifeResponse> deleteKnife(@ApiParam(value = "Knife id to delete" ,required=true) @RequestHeader(value="knifeId", required=true) Long knifeId,@ApiParam(value = "" ) @RequestHeader(value="api_key", required=false) String apiKey);


    @ApiOperation(value = "Finds Knives by status", nickname = "findKnivesByStatus", notes = "Multiple status values can be provided with comma separated strings", response = KnifeResponse.class, responseContainer = "List", tags={ "knives", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = KnifeResponse.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid status value") })
    @RequestMapping(value = "/knife/findByStatus",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<KnifeResponse>> findKnivesByStatus(@NotNull @ApiParam(value = "Status values that need to be considered for filter", required = true, allowableValues = "available, pending, not in stock") @Valid @RequestParam(value = "status", required = true) List<String> status);


    @ApiOperation(value = "Find knife by ID", nickname = "getKnifeById", notes = "Returns a single knife", response = KnifeResponse.class, authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "knives", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = KnifeResponse.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "knife not found") })
    @RequestMapping(value = "/knife/knifeById",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<KnifeResponse> getKnifeById(@ApiParam(value = "ID of knife that needs to be fetched" ,required=true) @RequestHeader(value="knifeId", required=true) Long knifeId);


    @ApiOperation(value = "Update an existing knife", nickname = "updateKnife", notes = "", tags={ "knives", })
    @ApiResponses(value = { 
    		@ApiResponse(code = 200, message = "successful operation", response = KnifeResponse.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Knife not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/knife/updateKnife",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<KnifeResponse> updateKnife(@ApiParam(value = "Knife object that needs to be added to the store" ,required=true ) @RequestHeader(value="knifeId", required=true) Long knifeId, @Valid @RequestBody KnifeResponse body);


    @ApiOperation(value = "Updates a knife in the store with form data", nickname = "updatwKnifetWithForm", notes = "", tags={ "knives", })
    @ApiResponses(value = { 
    @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/knife/updateKnifeForm",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    ResponseEntity<KnifeResponse> updatwKnifetWithForm(@ApiParam(value = "ID of knife that needs to be updated" ,required=true) @RequestHeader(value="postKnifeBytId", required=true) Long postKnifeBytId,@ApiParam(value = "Updated name of the knife") @RequestParam(value="name", required=false)  String name,@ApiParam(value = "Updated status of the knife") @RequestParam(value="status", required=false)  String status);


    @ApiOperation(value = "uploads an image", nickname = "uploadFile", notes = "", response = ModelApiResponse.class, tags={ "knives", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ModelApiResponse.class) })
    @RequestMapping(value = "/knife/knifeById/uploadImage",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" },
        method = RequestMethod.POST)
    ResponseEntity<ModelApiResponse> uploadFile(@ApiParam(value = "ID of knife to update" ,required=true) @RequestHeader(value="knifeId", required=true) Long knifeId,@ApiParam(value = "Additional data to pass to server") @RequestParam(value="additionalMetadata", required=false)  String additionalMetadata,@ApiParam(value = "file to upload") @Valid @RequestPart(value="file", required=false) MultipartFile file);

}
